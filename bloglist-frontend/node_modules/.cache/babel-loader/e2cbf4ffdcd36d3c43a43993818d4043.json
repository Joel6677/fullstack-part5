{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\n// import Blog from './components/Blog'\n// import Notification from './components/Notification'\n// import blogService from './services/blogs'\n// import loginService from './services/login'\n// import Togglable from './components/Togglable'\n// import BlogForm from './components/BlogForm'\n// import './App.css'\n// const App = () => {\n//   const [blogs, setBlogs] = useState([])\n//   const [username, setUsername] = useState('')\n//   const [password, setPassword] = useState('')\n//   const [user, setUser] = useState(null)\n//   const [errorMessage, setErrorMessage] = useState(null)\n//   const [infoMessage, setInfoMessage] = useState(null)\n//   const blogFormRef = React.createRef()\n//   useEffect(() => {\n//     blogService.getAll().then(blogs =>\n//       setBlogs(blogs)\n//     )\n//   }, [])\n//   useEffect(() => {\n//     const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\n//     if (loggedUserJSON) {\n//       const user = JSON.parse(loggedUserJSON)\n//       setUser(user)\n//       blogService.setToken(user.token)\n//     }\n//   }, [])\n//   const addBlog = (blogObject) => {\n//     blogFormRef.current.toggleVisibility()\n//     blogService\n//       .create(blogObject)\n//       .then(returnedBlog => {\n//         setBlogs(blogs.concat(returnedBlog))\n//         setInfoMessage(`a new blog \"${blogObject.title}\" by \"${blogObject.author}\" added`)\n//         setTimeout(() => {\n//           setInfoMessage(null)\n//         }, 5000)\n//       })\n//   }\n//   const likeBlog = (id) => {\n//     const blog = blogs.find(b => b.id === id)\n//     const blogObject = {\n//       title: blog.title,\n//       author: blog.author,\n//       url: blog.url,\n//       likes: blog.likes + 1,\n//       id: blog.id\n//     }\n//     console.log(blogObject)\n//     blogService.update(id, blogObject)\n//     .then(returnedBlog => {\n//       setBlogs(blogs.map(blog => blog.id !== returnedBlog.id ? blog : returnedBlog))\n//     })\n//   }\n//   // const deleteBlog = (id) => {\n//   //   blogService\n//   //     .remove(id)\n//   //     .then(() => setBlogs(blogs.filter(blog => blog.id !== id)))\n//   // }\n//   const handleRemove = (blogToRemove) => {\n//     const idToRemove = blogToRemove.id\n//     console.log(idToRemove)\n//     const whoPostedThis = (blogToRemove.user === undefined ? null : blogToRemove.user.username)\n//     console.log(whoPostedThis)\n//     const currentUser = (\n//       user === null ?\n//         null : user.username\n//     )\n//     console.log(currentUser)\n//     if (currentUser !== whoPostedThis) {\n//       setTimeout(() => {\n//       }, 5000)\n//     }\n//     else if (window.confirm(`Are you sure you want to remove this blog?`)) {\n//       console.log('removing blog ' + idToRemove)\n//       blogService\n//         .remove(idToRemove)\n//         .then(() => setBlogs(blogs.filter(blog => blog.id !== idToRemove)))\n//       setTimeout(() => {\n//       }, 5000)\n//     }\n//   }\n//   const handleLogin = async (event) => {\n//     event.preventDefault()\n//     try {\n//       const user = await loginService.login({\n//         username, password,\n//       })\n//       window.localStorage.setItem(\n//         'loggedBlogappUser', JSON.stringify(user)\n//       ) \n//       blogService.setToken(user.token)\n//       setUser(user)\n//       setUsername('')\n//       setPassword('')\n//     } catch (exception) {\n//       setErrorMessage('wrong username or password')\n//       setTimeout(() => {\n//         setErrorMessage(null)\n//       }, 5000)\n//     }\n//   }\n//   const handleLogout = async (event) => {\n//     event.preventDefault()\n//     window.localStorage.removeItem('loggedBlogappUser')\n//     blogService.setToken(null)\n//     setUser(null)\n//   }\n//   if (user === null) {\n//     return (\n//       <div>\n//         <h2>Log in to application</h2>\n//         <Notification message={errorMessage} color ='red'/>\n//         <form onSubmit={handleLogin}>\n//       <div>\n//         username\n//           <input\n//           type=\"text\"\n//           value={username}\n//           name=\"Username\"\n//           onChange={({ target }) => setUsername(target.value)}\n//         />\n//       </div>\n//       <div>\n//         password\n//           <input\n//           type=\"password\"\n//           value={password}\n//           name=\"Password\"\n//           onChange={({ target }) => setPassword(target.value)}\n//         />\n//       </div>\n//       <button type=\"submit\">login</button>\n//     </form>\n//       </div>\n//     )\n//   }\n//   return (\n//     <div>\n//       <h2>blogs</h2>\n//       <Notification message={infoMessage} color='green' />\n//       <form onSubmit={handleLogout}>\n//         {user.name} logged in\n//         <button type=\"submit\">logout</button>\n//       </form>\n//       <div>\n//         {blogs.sort((a, b) => b.likes - a.likes)\n//         .map(blog =>\n//           <Blog key={blog.id} blog={blog} likeBlog={() => likeBlog(blog.id)} handleRemove = {handleRemove} username={user.username}/>\n//         )}\n//       </div>\n//       <div>\n//         <Togglable buttonLabel=\"new blog\" ref={blogFormRef}>\n//           <BlogForm createBlog={addBlog} />\n//         </Togglable>\n//       </div>\n//     </div>\n//   )\n// }\n// export default App","map":{"version":3,"sources":["/home/hejoel/fullstack/fullstack-part5/bloglist-frontend/src/App.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from 'react'\n// import Blog from './components/Blog'\n// import Notification from './components/Notification'\n// import blogService from './services/blogs'\n// import loginService from './services/login'\n// import Togglable from './components/Togglable'\n// import BlogForm from './components/BlogForm'\n// import './App.css'\n\n// const App = () => {\n//   const [blogs, setBlogs] = useState([])\n//   const [username, setUsername] = useState('')\n//   const [password, setPassword] = useState('')\n//   const [user, setUser] = useState(null)\n//   const [errorMessage, setErrorMessage] = useState(null)\n//   const [infoMessage, setInfoMessage] = useState(null)\n//   const blogFormRef = React.createRef()\n\n//   useEffect(() => {\n//     blogService.getAll().then(blogs =>\n//       setBlogs(blogs)\n//     )\n//   }, [])\n\n//   useEffect(() => {\n//     const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\n//     if (loggedUserJSON) {\n//       const user = JSON.parse(loggedUserJSON)\n//       setUser(user)\n//       blogService.setToken(user.token)\n//     }\n//   }, [])\n\n//   const addBlog = (blogObject) => {\n//     blogFormRef.current.toggleVisibility()\n    \n//     blogService\n//       .create(blogObject)\n//       .then(returnedBlog => {\n//         setBlogs(blogs.concat(returnedBlog))\n//         setInfoMessage(`a new blog \"${blogObject.title}\" by \"${blogObject.author}\" added`)\n//         setTimeout(() => {\n//           setInfoMessage(null)\n//         }, 5000)\n//       })\n//   }\n\n//   const likeBlog = (id) => {\n//     const blog = blogs.find(b => b.id === id)\n    \n//     const blogObject = {\n//       title: blog.title,\n//       author: blog.author,\n//       url: blog.url,\n//       likes: blog.likes + 1,\n//       id: blog.id\n//     }\n\n//     console.log(blogObject)\n\n//     blogService.update(id, blogObject)\n//     .then(returnedBlog => {\n//       setBlogs(blogs.map(blog => blog.id !== returnedBlog.id ? blog : returnedBlog))\n//     })\n\n//   }\n\n//   // const deleteBlog = (id) => {\n\n//   //   blogService\n//   //     .remove(id)\n//   //     .then(() => setBlogs(blogs.filter(blog => blog.id !== id)))\n\n//   // }\n\n//   const handleRemove = (blogToRemove) => {\n//     const idToRemove = blogToRemove.id\n//     console.log(idToRemove)\n//     const whoPostedThis = (blogToRemove.user === undefined ? null : blogToRemove.user.username)\n//     console.log(whoPostedThis)\n//     const currentUser = (\n//       user === null ?\n//         null : user.username\n//     )\n//     console.log(currentUser)\n//     if (currentUser !== whoPostedThis) {\n//       setTimeout(() => {\n//       }, 5000)\n\n//     }\n//     else if (window.confirm(`Are you sure you want to remove this blog?`)) {\n//       console.log('removing blog ' + idToRemove)\n//       blogService\n//         .remove(idToRemove)\n//         .then(() => setBlogs(blogs.filter(blog => blog.id !== idToRemove)))\n//       setTimeout(() => {\n//       }, 5000)\n//     }\n\n//   }\n\n\n  \n\n//   const handleLogin = async (event) => {\n//     event.preventDefault()\n//     try {\n//       const user = await loginService.login({\n//         username, password,\n//       })\n\n//       window.localStorage.setItem(\n//         'loggedBlogappUser', JSON.stringify(user)\n//       ) \n\n//       blogService.setToken(user.token)\n//       setUser(user)\n//       setUsername('')\n//       setPassword('')\n//     } catch (exception) {\n//       setErrorMessage('wrong username or password')\n//       setTimeout(() => {\n//         setErrorMessage(null)\n//       }, 5000)\n//     }\n//   }\n\n//   const handleLogout = async (event) => {\n//     event.preventDefault()\n//     window.localStorage.removeItem('loggedBlogappUser')\n//     blogService.setToken(null)\n//     setUser(null)\n//   }\n\n\n\n\n//   if (user === null) {\n//     return (\n//       <div>\n//         <h2>Log in to application</h2>\n//         <Notification message={errorMessage} color ='red'/>\n        \n//         <form onSubmit={handleLogin}>\n//       <div>\n//         username\n//           <input\n//           type=\"text\"\n//           value={username}\n//           name=\"Username\"\n//           onChange={({ target }) => setUsername(target.value)}\n//         />\n//       </div>\n//       <div>\n//         password\n//           <input\n//           type=\"password\"\n//           value={password}\n//           name=\"Password\"\n//           onChange={({ target }) => setPassword(target.value)}\n//         />\n//       </div>\n//       <button type=\"submit\">login</button>\n//     </form>\n//       </div>\n//     )\n//   }\n\n//   return (\n    \n//     <div>\n//       <h2>blogs</h2>\n//       <Notification message={infoMessage} color='green' />\n//       <form onSubmit={handleLogout}>\n//         {user.name} logged in\n//         <button type=\"submit\">logout</button>\n//       </form>\n//       <div>\n//         {blogs.sort((a, b) => b.likes - a.likes)\n//         .map(blog =>\n//           <Blog key={blog.id} blog={blog} likeBlog={() => likeBlog(blog.id)} handleRemove = {handleRemove} username={user.username}/>\n//         )}\n//       </div>\n//       <div>\n//         <Togglable buttonLabel=\"new blog\" ref={blogFormRef}>\n//           <BlogForm createBlog={addBlog} />\n//         </Togglable>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default App\n"]},"metadata":{},"sourceType":"module"}